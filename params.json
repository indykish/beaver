{"name":"Beaver","tagline":"python daemon that munches on logs and sends their contents to logstash","body":"Requirements\r\n============\r\n\r\n* Python 2.6+\r\n* Optional zeromq support: install libzmq (``brew install zmq`` or ``apt-get install libzmq-dev``) and pyzmq (``pip install pyzmq==2.1.11``)\r\n\r\nInstallation\r\n============\r\n\r\nUsing PIP:\r\n\r\nFrom Github::\r\n\r\n    pip install git+git://github.com/josegonzalez/beaver.git#egg=beaver\r\n\r\nFrom PyPI::\r\n\r\n    pip install beaver==29\r\n\r\nUsage\r\n=====\r\n\r\nusage::\r\n\r\n    beaver [-h] [-c CONFIG] [-d] [-D] [-f FILES [FILES ...]]\r\n           [-F {json,msgpack,raw,rawjson,string}] [-H HOSTNAME] [-m {bind,connect}]\r\n           [-l OUTPUT] [-p PATH] [-P PID]\r\n           [-t {mqtt,rabbitmq,redis,sqs,stdout,udp,zmq}] [-v] [--fqdn]\r\n\r\noptional arguments::\r\n\r\n    -h, --help            show this help message and exit\r\n    -c CONFIG, --configfile CONFIG\r\n                          ini config file path\r\n    -d, --debug           enable debug mode\r\n    -D, --daemonize       daemonize in the background\r\n    -f FILES [FILES ...], --files FILES [FILES ...]\r\n                          space-separated filelist to watch, can include globs\r\n                          (*.log). Overrides --path argument\r\n    -F {json,msgpack,raw,rawjson,string}, --format {json,msgpack,raw,rawjson,string}\r\n                          format to use when sending to transport\r\n    -H HOSTNAME, --hostname HOSTNAME\r\n                          manual hostname override for source_host\r\n    -m {bind,connect}, --mode {bind,connect}\r\n                          bind or connect mode\r\n    -l OUTPUT, --logfile OUTPUT, -o OUTPUT, --output OUTPUT\r\n                          file to pipe output to (in addition to stdout)\r\n    -p PATH, --path PATH  path to log files\r\n    -P PID, --pid PID     path to pid file\r\n    -t {mqtt,rabbitmq,redis,stdout,udp,zmq}, --transport {mqtt,rabbitmq,redis,sqs,stdout,udp,zmq}\r\n                          log transport method\r\n    -v, --version         output version and quit\r\n    --fqdn                use the machine's FQDN for source_host\r\n\r\nBackground\r\n==========\r\n\r\nBeaver provides an lightweight method for shipping local log files to Logstash. It does this using redis, zeromq, udp, rabbit or stdout as the transport. This means you'll need a redis, zeromq, udp, amqp or stdin input somewhere down the road to get the events.\r\n\r\nEvents are sent in logstash's ``json_event`` format. Options can also be set as environment variables.\r\n\r\nNOTE: the redis transport uses a namespace of ``logstash:beaver`` by default.  You will need to update your logstash indexer to match this, or you may configure beaver to do otherwise.\r\n\r\nConfiguration File Options\r\n--------------------------\r\n\r\nBeaver can optionally get data from a ``configfile`` using the ``-c`` flag. This file is in ``ini`` format. Global configuration will be under the ``beaver`` stanza. The following are global beaver configuration keys with their respective meanings:\r\n\r\n* mqtt_host: Default ``localhost``. Host for mosquitto\r\n* mqtt_port: Default ``1883``. Port for mosquitto\r\n* mqtt_clientid: Default ``mosquitto``. Mosquitto client id\r\n* mqtt_keepalive: Default ``60``. mqtt keepalive ping\r\n* mqtt_topic: Default ``/logstash``. Topic to publish to\r\n* rabbitmq_host: Defaults ``localhost``. Host for RabbitMQ\r\n* rabbitmq_port: Defaults ``5672``. Port for RabbitMQ\r\n* rabbitmq_vhost: Default ``/``\r\n* rabbitmq_username: Default ``guest``\r\n* rabbitmq_password: Default ``guest``\r\n* rabbitmq_queue: Default ``logstash-queue``.\r\n* rabbitmq_exchange_type: Default ``direct``.\r\n* rabbitmq_exchange_durable: Default ``0``.\r\n* rabbitmq_key: Default ``logstash-key``.\r\n* rabbitmq_exchange: Default ``logstash-exchange``.\r\n* redis_url: Default ``redis://localhost:6379/0``. Redis URL\r\n* redis_namespace: Default ``logstash:beaver``. Redis key namespace\r\n* sqs_aws_access_key: Can be left blank to use IAM Roles or AWS_ACCESS_KEY_ID environment variable (see: https://github.com/boto/boto#getting-started-with-boto)\r\n* sqs_aws_secret_key: Can be left blank to use IAM Roles or AWS_SECRET_ACCESS_KEY environment variable (see: https://github.com/boto/boto#getting-started-with-boto)\r\n* sqs_aws_region: Default ``us-east-1``. AWS Region\r\n* sqs_aws_queue: SQS queue (must exist)\r\n* udp_host: Default ``127.0.0.1``. UDP Host\r\n* udp_port: Default ``9999``. UDP Port\r\n* zeromq_address: Default ``tcp://localhost:2120``. Zeromq URL\r\n* zeromq_hwm: Default None. Zeromq HighWaterMark socket option\r\n* zeromq_bind: Default ``bind``. Whether to bind to zeromq host or simply connect\r\n\r\nThe following are used for instances when a TransportException is thrown - Transport dependent\r\n\r\n* respawn_delay: Default ``3``. Initial respawn delay for exponential backoff\r\n* max_failure: Default ``7``. Max failures before exponential backoff terminates\r\n\r\nThe following configuration keys are for SinceDB support. Specifying these will enable saving the current line number in an sqlite database. This is useful for cases where you may be restarting the beaver process, such as during a logrotate.\r\n\r\n* sincedb_path: Default ``None``. Full path to an ``sqlite3`` database. Will be created at this path if it does not exist. Beaver process must have read and write access\r\n\r\nThe following configuration keys are for building an SSH Tunnel that can be used to proxy from the current host to a desired server. This proxy is torn down when Beaver halts in all cases.\r\n\r\n* ssh_key_file: Default ``None``. Full path to ``id_rsa`` key file\r\n* ssh_tunnel: Default ``None``. SSH Tunnel in the format ``user@host:port``\r\n* ssh_tunnel_port: Default ``None``. Local port for SSH Tunnel\r\n* ssh_remote_host: Default ``None``. Remote host to connect to within SSH Tunnel\r\n* ssh_remote_port: Default ``None``. Remote port to connect to within SSH Tunnel\r\n\r\nThe following can also be passed via argparse. Argparse will override all options in the configfile, when specified.\r\n\r\n* format: Default ``json``. Options ``[ json, msgpack, string ]``. Format to use when sending to transport\r\n* files: Default ``files``. Space-separated list of files to tail. (Comma separated if specified in the config file)\r\n* path: Default ``/var/log``. Path glob to tail.\r\n* transport: Default ``stdout``. Transport to use when log changes are detected\r\n* fqdn: Default ``False``. Whether to use the machine's FQDN in transport output\r\n* hostname: Default ``None``. Manually specified hostname\r\n\r\nExamples\r\n--------\r\n\r\n\r\nExample 1: Listen to all files in the default path of /var/log on standard out as json::\r\n\r\n    beaver\r\n\r\nExample 2: Listen to all files in the default path of /var/log on standard out with msgpack::\r\n\r\n    beaver --format msgpack\r\n\r\nExample 3: Listen to all files in the default path of /var/log on standard out as a string::\r\n\r\n    beaver --format string\r\n\r\nExample 4: Sending logs from /var/log files to a redis list::\r\n\r\n    # /etc/beaver/conf\r\n    [beaver]\r\n    redis_url: redis://localhost:6379/0\r\n\r\n    # From the commandline\r\n    beaver  -c /etc/beaver/conf -t redis\r\n\r\nExample 5: Zeromq listening on port 5556 (all interfaces)::\r\n\r\n    # /etc/beaver/conf\r\n    [beaver]\r\n    zeromq_address: tcp://*:5556\r\n\r\n    # logstash indexer config:\r\n    input {\r\n      zeromq {\r\n        type => 'shipper-input'\r\n        mode => 'client'\r\n        topology => 'pushpull'\r\n        address => 'tcp://shipperhost:5556'\r\n      }\r\n    }\r\n    output { stdout { debug => true } }\r\n\r\n    # From the commandline\r\n    beaver  -c /etc/beaver/conf -m bind -t zmq\r\n\r\n\r\nExample 6: Zeromq connecting to remote port 5556 on indexer::\r\n\r\n    # /etc/beaver/conf\r\n    [beaver]\r\n    zeromq_address: tcp://indexer:5556\r\n\r\n    # logstash indexer config:\r\n    input {\r\n      zeromq {\r\n        type => 'shipper-input'\r\n        mode => 'server'\r\n        topology => 'pushpull'\r\n        address => 'tcp://*:5556'\r\n      }\r\n    }\r\n    output { stdout { debug => true } }\r\n\r\n    # on the commandline\r\n    beaver -c /etc/beaver/conf -m connect -t zmq\r\n\r\nExample 7: Real-world usage of Redis as a transport::\r\n\r\n    # in /etc/hosts\r\n    192.168.0.10 redis-internal\r\n\r\n    # /etc/beaver/conf\r\n    [beaver]\r\n    redis_url: redis://redis-internal:6379/0\r\n    redis_namespace: app:unmappable\r\n\r\n    # logstash indexer config:\r\n    input {\r\n      redis {\r\n        host => 'redis-internal'\r\n        data_type => 'list'\r\n        key => 'app:unmappable'\r\n        type => 'app:unmappable'\r\n      }\r\n    }\r\n    output { stdout { debug => true } }\r\n\r\n    # From the commandline\r\n    beaver -c /etc/beaver/conf -f /var/log/unmappable.log -t redis\r\n\r\nExample 8: RabbitMQ connecting to defaults on remote broker::\r\n\r\n    # /etc/beaver/conf\r\n    [beaver]\r\n    rabbitmq_host: 10.0.0.1\r\n\r\n    # logstash indexer config:\r\n    input { amqp {\r\n        name => 'logstash-queue'\r\n        type => 'direct'\r\n        host => '10.0.0.1'\r\n        exchange => 'logstash-exchange'\r\n        key => 'logstash-key'\r\n        exclusive => false\r\n        durable => false\r\n        auto_delete => false\r\n      }\r\n    }\r\n    output { stdout { debug => true } }\r\n\r\n    # From the commandline\r\n    beaver -c /etc/beaver/conf -t rabbitmq\r\n\r\nExample 9: Read config from config.ini and put to stdout::\r\n\r\n    # /etc/beaver/conf:\r\n    ; follow a single file, add a type, some tags and fields\r\n    [/tmp/somefile]\r\n    type: mytype\r\n    tags: tag1,tag2\r\n    add_field: fieldname1,fieldvalue1[,fieldname2,fieldvalue2, ...]\r\n\r\n    ; follow all logs in /var/log except those with `messages` or `secure` in the name\r\n    [/var/log/*log]\r\n    type: syslog\r\n    tags: sys\r\n    exclude: (messages,secure)\r\n\r\n    ; follow /var/log/messages.log and /var/log/secure.log using file globbing\r\n    [/var/log/{messages,secure}.log]\r\n    type: syslog\r\n    tags: sys\r\n\r\n    # From the commandline\r\n    beaver -c /etc/beaver/conf -t stdout\r\n\r\nExample 10: UDP transport::\r\n\r\n    # /etc/beaver/conf\r\n    [beaver]\r\n    udp_host: 127.0.0.1\r\n    udp_port: 9999\r\n\r\n    # logstash indexer config:\r\n    input {\r\n      udp {\r\n        type => 'shipper-input'\r\n        host => '127.0.0.1'\r\n        port => '9999'\r\n      }\r\n    }\r\n    output { stdout { debug => true } }\r\n\r\n    # From the commandline\r\n    beaver -c /etc/beaver/conf -t udp\r\n\r\nExample 11: SQS Transport::\r\n\r\n    # /etc/beaver/conf\r\n    [beaver]\r\n    sqs_aws_region: us-east-1\r\n    sqs_aws_queue: logstash-input\r\n    sqs_aws_access_key: <access_key>\r\n    sqs_aws_secret_access_key: <secret_key>\r\n\r\n    # logstash indexer config:\r\n    input {\r\n      sqs {\r\n        queue => \"logstash-input\"\r\n        type => \"shipper-input\"\r\n        format => \"json_event\"\r\n        access_key => \"<access_key>\"\r\n        secret_key => \"<secret_key>\"\r\n      }\r\n    }\r\n    output { stdout { debug => true } }\r\n\r\n    # From the commandline\r\n    beaver -c /etc/beaver/conf -t sqs\r\n\r\nExample 12: [Raw Json Support](http://blog.pkhamre.com/2012/08/23/logging-to-logstash-json-format-in-nginx/::\r\n\r\n    beaver --format rawjson\r\n\r\nExample 13: Mqtt transport using Mosquitto::\r\n\r\n    # /etc/beaver/conf\r\n    [beaver]\r\n    mqtt_client_id: 'beaver_client'\r\n    mqtt_topic: '/logstash'\r\n    mqtt_host: '127.0.0.1'\r\n    mqtt_port: '1318'\r\n    mqtt_keepalive: '60'\r\n\r\n    # logstash indexer config:\r\n    input {\r\n      mqtt {\r\n        host => '127.0.0.1'\r\n        data_type => 'list'\r\n        key => 'app:unmappable'\r\n        type => 'app:unmappable'\r\n      }\r\n    }\r\n    output { stdout { debug => true } }\r\n\r\n    # From the commandline\r\n    beaver -c /etc/beaver/conf -f /var/log/unmappable.log -t mqtt\r\n\r\nExample 14: Sincedb support using and sqlite3 db\r\n\r\nNote that this will require R/W permissions on the file at sincedb path, as Beaver will store the current line for a given filename/file id.::\r\n\r\n    # /etc/beaver/conf\r\n    [beaver]\r\n    sincedb_path: /etc/beaver/since.db\r\n\r\n    [/var/log/syslog]\r\n    type: syslog\r\n    tags: sys,main\r\n    sincedb_write_interval: 3 ; time in seconds\r\n\r\n    # From the commandline\r\n    beaver -c /etc/beaver/conf\r\n\r\nExample 15: Loading stanzas from /etc/beaver/conf.d/* support::\r\n\r\n    # /etc/beaver/conf\r\n    [beaver]\r\n    format: json\r\n\r\n    # /etc/beaver/conf.d/syslog\r\n    [/var/log/syslog]\r\n    type: syslog\r\n    tags: sys,main\r\n\r\n    # /etc/beaver/conf.d/nginx\r\n    [/var/log/nginx]\r\n    format: rawjson\r\n    type: nginx\r\n    tags: nginx,server\r\n\r\n    # From the commandline\r\n    beaver -c /etc/beaver/conf\r\n\r\n\r\nAs you can see, ``beaver`` is pretty flexible as to how you can use/abuse it in production.\r\n\r\nTodo\r\n====\r\n\r\n* More documentation\r\n* <del>Use python threading + subprocess in order to support usage of ``yield`` across all operating systems</del>\r\n* <del>Fix usage on non-linux platforms - file.readline() does not work as expected on OS X. See above for potential solution</del>\r\n* More transports\r\n* <del>Ability to specify files, tags, and other metadata within a configuration file</del>\r\n\r\nCaveats\r\n=======\r\n\r\nWhen using ``copytruncate`` style log rotation, two race conditions can occur:\r\n\r\n1. Any log data written prior to truncation which beaver has not yet\r\n   read and processed is lost. Nothing we can do about that.\r\n\r\n2. Should the file be truncated, rewritten, and end up being larger than\r\n   the original file during the sleep interval, beaver won't detect\r\n   this. After some experimentation, this behavior also exists in GNU\r\n   tail, so I'm going to call this a \"don't do that then\" bug :)\r\n\r\n   Additionally, the files beaver will most likely be called upon to\r\n   watch which may be truncated are generally going to be large enough\r\n   and slow-filling enough that this won't crop up in the wild.\r\n\r\n\r\nCredits\r\n=======\r\n\r\nBased on work from Giampaolo and Lusis::\r\n\r\n    Real time log files watcher supporting log rotation.\r\n\r\n    Original Author: Giampaolo Rodola' <g.rodola [AT] gmail [DOT] com>\r\n    http://code.activestate.com/recipes/577968-log-watcher-tail-f-log/\r\n\r\n    License: MIT\r\n\r\n    Other hacks (ZMQ, JSON, optparse, ...): lusis\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}